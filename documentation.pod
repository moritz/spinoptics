If you see some weird formatting in this file, run
C<perldoc documentation.pod> to see it with proper markup

=head1 Compiling

For compiling C<spin.cpp> you need

=over

=item C<make> and C<g++> 4.1 or later

=item the C<superlu> shared library and header files (C<libsuperlu3-dev> in Debian)

=item the C<eigen> linear algebra library from L<http://eigen.tuxfamily.org/>,
either the development track leading to 3.0, or the 3.0 stable branch (when it
exists). If you have problems building the program, revert eigen to revision
2223.

=back

You might need to adjust the paths to superlu and eigen in F<Makefile>.

Once the prerequisites are in place, typing C<make> should build the program
into a binary called C<spin>.

=head1 Running

To run a single simulation with C<spin>, type

   ./spin <options>

where the following options exist:

=over

=item C<-r 0.1>

sets the spin-orbit coupling strength relative to the hopping parameter, in
units of C<2 a t> (a = lattice constant).

=item C<-s 0.0>

sets the ratio of  spin-orbit coupling strengths C<left/right> from the
interface

=item C<-b 0.0>

sets the strength of magnetic field in Tesla (not well tested)

=item C<-e 2.0>

sets the Fermi energy, in units of the hopping parameter.

=item C<-n 19>

sets the nice level of the process.

=item C<-o filename>

write to F<filename> instead of STDOUT

=item C<-p 50>

angle of the interface in degrees

=item C<-q>

be quiet.

=back

For running a sweep over a certain parameter (and distributed among multiple
hosts), you can run

    perl run.pl alpha

This varies the parameter alpha (spin-orbit coupling strength) within a range
of parameters defined in C<run.pl>.

The output looks like this:

    Writing data to `data/266'
    START: (wvbh070) alpha0.0000 ( 266)
    START: (wvbh072) alpha0.0020 ( 266)
    START: (wvbh071) alpha0.0010 ( 266)
    START: (wvbh073) alpha0.0030 ( 266)
    START: (wvbh074) alpha0.0050 ( 266)

This creates a directory called C<data/266> where a file is written for each
data point.

Additionally to C<alpha> you can run over C<phi> (interface angle), C<scale>
(ratio of spin-orbit interactions left and right) and C<energy> (Fermi
energy).

=over

=item Plotting the results

You can plot a data series with the command

    perl plot.pl 266diff | xmgrace -nxy -

where C<266> is the number of the dataset, and C<diff> is the data selector.
The following selectors are available:

=item  uu

Transmission matrix element C<T_{spinup 2 <-- spinup 1}>

=item  ud

Transmission matrix element C<T_{spindown 2 <-- spinup 1}>

=item  du

Transmission matrix element C<T_{spindup 2 <-- spindown 1}>

=item  dd

Transmission matrix element C<T_{spindown 2 <-- spindown 1}>

=item diff

C<uu - dd>

=item rel

C<(uu - dd) / (uu + dd)>

=back

You can combine multiple data series, provided that they run over the same
parameter and same values:

    perl plot.pl 266rel 1234diff

=head1 Source code management

This file, the program code and the TeX code for my thesis are under version
control with I<git, the stupid content tracker>. See L<http://git-scm.com/>
for more information on git.

=head1 Source files

The following C++ source files are of interest:

=over

=item spin.cpp

Main program; contains all the things that are of interest to a physicist.

=item math-utils.h

Contains some auxiliary functions for converting between BLAS implementations
and solving mathematical problems.

=item Makefile

Controls the how the program is built, and contains paths to the various
components (Eigen, SuperLU)

=back
